import webob.dec
import webob
import eventlet
from eventlet import wsgi, listen
from routes import Mapper, middleware
 
 
class controller(object):
    def index(self):
        return "do index()"
 
    def add(self):
        return "do show()"


class MyController(object):
    def getlist(self, mykey):
        print("step 4: MyController's getlist(self, mykey) is invoked")
	return "get key la"



class MyApplication(object):
    """Test application to call from router."""

    def __init__(self, controller):
        self._controller = controller
        
    def __call__(self, environ, start_response):
        print("step 3: MyApplication is invoked")
        
        action_args = environ['wsgiorg.routing_args'][1].copy()
        try:
            del action_args['controller']
        except KeyError:
            pass

        try:
            del action_args['format']
        except KeyError:
            pass
        
        action = action_args.pop('action', None)
        controller_method = getattr(self._controller, action)
        result = controller_method(**action_args)
        
        start_response('200 OK', [('Content-Type', 'text/plain')])
        return [result]


class Router(object):  
    """WSGI middleware that maps incoming requests to WSGI apps."""  
  
    def __init__(self):  
        """Create a router for the given routes.Mapper. 
 
        Each route in `mapper` must specify a 'controller', which is a 
        WSGI app to call.  You'll probably want to specify an 'action' as 
        well and have your controller be an object that can route 
        the request to the action-specific method. 
 
        Examples: 
          mapper = routes.Mapper() 
          sc = ServerController() 
 
          # Explicit mapping of one route to a controller+action 
          mapper.connect(None, '/svrlist', controller=sc, action='list') 
 
          # Actions are all implicitly defined 
          mapper.resource('server', 'servers', controller=sc) 
 
          # Pointing to an arbitrary WSGI app.  You can specify the 
          # {path_info:.*} parameter so the target app can be handed just that 
          # section of the URL. 
          mapper.connect(None, '/v1.0/{path_info:.*}', controller=BlogApp()) 
 
        """  
        # if we're only running in debug, bump routes' internal logging up a  
        # notch, as it's very spammy  
 	my_application = MyApplication(MyController()) 
        self.mapper = Mapper() 
        route_name = "dummy_route"
        route_path = "/dummies"
	self.mapper.connect(route_name, route_path,
                        controller=my_application,
                        action="getlist",
                        mykey="myvalue",
                        conditions={"method": ['GET']})
        self.map = self.mapper  
        self._router = middleware.RoutesMiddleware(self._dispatch,  
                                                          self.map)  
 
    @webob.dec.wsgify(RequestClass=webob.Request)  
    def __call__(self, req):  
        """Route the incoming request to a controller based on self.map. 
 
        If no match, return a 404. 
 
        """  
        return self._router  
 
    @staticmethod  
    @webob.dec.wsgify(RequestClass=webob.Request)  
    def _dispatch(req):  
        """Dispatch the request to the appropriate controller. 
 
        Called by self._router after matching the incoming request to a route 
        and putting the information into req.environ.  Either returns 404 
        or the routed WSGI app's response. 
 
        """  
        match = req.environ['wsgiorg.routing_args'][1]  
        if not match:  
            return render_exception(  
                exception.NotFound(_('The resource could not be found.')),  
                user_locale=req.best_match_language())  
        app = match['controller']  
        return app   
""" 
class App(object):
    def __init__(self):
        self.controller = controller()
        m = Mapper()
        m.connect('blog', '/blog/{action}/{id}', controller=controller,
                  conditions={'method': ['GET']})
        self.router = middleware.RoutesMiddleware(self.dispatch, m)
 
    @webob.dec.wsgify
    def dispatch(self, req):
        match = req.environ['wsgiorg.routing_args'][1]
        if not match:
            return 'error url: %s' % req.environ['PATH_INFO']
 
        action = match['action']
        if hasattr(self.controller, action):
            func = getattr(self.controller, action)
            ret = func()
            return ret
        else:
            return "has no action:%s" % action
 
    @webob.dec.wsgify
    def __call__(self, req):
        return self.router
"""
 
if __name__ == '__main__':
    socket = listen(('0.0.0.0', 8000))
 
    #server = eventlet.spawn(wsgi.server, socket, App())
    server = eventlet.spawn(wsgi.server, socket, Router())
    server.wait()
